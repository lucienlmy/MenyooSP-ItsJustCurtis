name: EnhancedFreecam_Build

on:
  push:
    branches: [ "EnhancedFreecam-joy" ]

env:
  SOLUTION_FILE_PATH: ./Solution/Menyoo.sln
  BUILD_CONFIGURATION: Release
  CANCELJOB: false

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  check-version-and-merge:
    runs-on: ubuntu-latest
    outputs:
      CANCELJOB: ${{ steps.set_output.outputs.CANCELJOB }}
      VERSION: ${{ steps.calculate_version.outputs.VERSION }}

    steps:
      - name: Checkout repository
        if: env.CANCELJOB != 'true'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Calculate Version with Commit Count
        id: calculate_version
        if: env.CANCELJOB != 'true'
        shell: bash
        run: |
          COMMIT_COUNT=$(git rev-list --count HEAD)
          BASE_VERSION=$(grep '#define MENYOO_CURRENT_VER_' Solution/source/macros.h | awk '{print $3}' | tr -d '"')
          VERSION="v${BASE_VERSION}.${COMMIT_COUNT}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated base version: $VERSION"

      - name: Check if tag already exists and increment version
        if: env.CANCELJOB != 'true'
        id: increment_version
        shell: bash
        run: |
          BASE_VERSION=${{ env.VERSION }}
          COUNTER=1
          FINAL_VERSION=$BASE_VERSION

          echo "Checking if version $BASE_VERSION exists..."
          
          # Check using GitHub API first
          while gh api repos/${{ github.repository }}/git/ref/tags/$FINAL_VERSION --silent >/dev/null 2>&1; do
            echo "Version $FINAL_VERSION already exists, incrementing..."
            FINAL_VERSION="${BASE_VERSION}.${COUNTER}"
            COUNTER=$((COUNTER + 1))
            echo "Trying new version: $FINAL_VERSION"
          done

          # Double check with git ls-remote as fallback
          if git ls-remote --tags origin "refs/tags/$FINAL_VERSION" | grep -q "$FINAL_VERSION"; then
            echo "Fallback check found existing tag $FINAL_VERSION, incrementing further..."
            FINAL_VERSION="${BASE_VERSION}.${COUNTER}"
            COUNTER=$((COUNTER + 1))
          fi

          echo "Final version after increment checks: $FINAL_VERSION"
          echo "VERSION=$FINAL_VERSION" >> $GITHUB_ENV
          echo "version=$FINAL_VERSION" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check version pattern and merge
        id: check_version
        if: env.CANCELJOB != 'true'
        shell: bash
        run: |
          VERSION=${{ env.VERSION }}
          echo "Final version check for: $VERSION"
          
          if [[ $GITHUB_REF == "refs/heads/main" ]]; then
            echo "Already on main branch. Skipping merge check."
            exit 0
          fi

          # Improved PR check function
          check_pr_exists() {
            PR_LIST=$(gh pr list --head EnhancedFreecam-joy --base main --state open --json title,body,number)
            echo "Current PRs: $PR_LIST"
            PR_EXISTS=$(echo "$PR_LIST" | jq -r --arg VERSION "$VERSION" '.[] | select((.title | contains($VERSION)) or (.body | contains($VERSION)))')
            if [ -n "$PR_EXISTS" ]; then
              echo "Found existing PR with version $VERSION:"
              echo "$PR_EXISTS"
              return 0
            else
              return 1
            fi
          }

          # Enhanced version pattern matching
          if [[ $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?$ ]]; then
            echo "Version $VERSION is a full release format"
            if check_pr_exists; then
              echo "PR already exists with version $VERSION"
              echo "CANCELJOB=true" >> $GITHUB_ENV
              exit 0
            else
              echo "Creating new PR for version $VERSION"
              gh pr create \
                --title "Release $VERSION" \
                --body "Merging EnhancedFreecam-joy into main for release $VERSION" \
                --base main \
                --head EnhancedFreecam-joy
              echo "CANCELJOB=true" >> $GITHUB_ENV
              exit 0
            fi
          elif [[ $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(a|b|rc)[0-9]+$ ]]; then
            echo "Version $VERSION is a pre-release format"
          else
            echo "Version $VERSION is invalid or development version"
            echo "CANCELJOB=true" >> $GITHUB_ENV
            exit 0
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set output
        id: set_output
        if: env.CANCELJOB != 'true'
        run: |
          echo "CANCELJOB=${{ env.CANCELJOB }}" >> $GITHUB_OUTPUT
          echo "version=${{ env.VERSION }}" >> $GITHUB_OUTPUT

  build:
    if: github.ref == 'refs/heads/EnhancedFreecam-joy' && needs.check-version-and-merge.outputs.CANCELJOB != 'true'
    runs-on: windows-latest
    needs: check-version-and-merge
    env:
      VERSION: ${{ needs.check-version-and-merge.outputs.VERSION }}
    outputs:
      VERSION: ${{ needs.check-version-and-merge.outputs.VERSION }}

    steps:
      - name: Verify Version
        run: |
          if ([string]::IsNullOrEmpty("${{ env.VERSION }}")) {
            Write-Error "Version is empty or not set"
            exit 1
          }
          echo "Building version: ${{ env.VERSION }}"

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1

      - name: Build solution
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}} -verbosity:minimal -p:WarningLevel=0

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: MenyooSP-${{ env.VERSION }}
          path: |
            Solution/source/_Build/bin/Release/
            !Solution/source/_Build/bin/Release/Trash/
            !Solution/source/_Build/bin/Release/*.map
            !Solution/source/_Build/bin/Release/*.pdb

      - name: Cancel workflow on failure
        if: failure()
        uses: andymckay/cancel-action@0.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: [check-version-and-merge, build]
    permissions:
      contents: write
      packages: write
    runs-on: windows-latest
    env:
      VERSION: ${{ needs.check-version-and-merge.outputs.VERSION }}

    steps:
      - name: Debug Version
        run: |
          echo "VERSION: ${{ env.VERSION }}"
          echo "check-version-and-merge VERSION: ${{ needs.check-version-and-merge.outputs.VERSION }}"

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: MenyooSP-${{ env.VERSION }}
          path: artifacts

      - name: Create release zip
        shell: pwsh
        run: |
          $sourceDir = "artifacts"
          $zipFile = "MenyooSP-${{ env.VERSION }}.zip"
          
          if (Test-Path $zipFile) {
            Remove-Item $zipFile
          }
          
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::CreateFromDirectory(
            (Resolve-Path $sourceDir).Path,
            (Resolve-Path $zipFile).Path,
            [System.IO.Compression.CompressionLevel]::Optimal,
            $false
          )
          
          Write-Host "Created zip file: $zipFile"
          Get-Item $zipFile

      - name: Create GitHub release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: "MenyooSP ${{ env.VERSION }}"
          body: "Automated release of MenyooSP version ${{ env.VERSION }}"
          prerelease: ${{ contains(env.VERSION, 'a') || contains(env.VERSION, 'b') || contains(env.VERSION, 'rc') }}
          files: MenyooSP-${{ env.VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify release
        if: always()
        run: |
          echo "Release created with tag: ${{ env.VERSION }}"
          echo "Release URL: ${{ steps.create_release.outputs.html_url }}"